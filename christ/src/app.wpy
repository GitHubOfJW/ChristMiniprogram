<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import AccountTool from '@/utils/AccountTool'
import MusicTool from '@/utils/MusicTool'
import Request from '@/utils/request'
import { setStore } from 'wepy-redux'
import configStore from './store'
import { nextMusic, prevMusic } from '@/store/actions/musicPlayer'
const store = configStore()
setStore(store)
wepy.$store = store

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/profile',
      'pages/album',
      'pages/music',
      'pages/collect',
      'pages/question',
      'pages/share'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black',
      backgroundColor: '#fbfbff'
    },
    tabBar: {
      // backgroundColor: '#fbfbff',
      selectedColor: '#d30027',
      color: '#8a8a8a',
      list: [
        {
          iconPath: './static/imgs/home.png',
          selectedIconPath: './static/imgs/home-selected.png',
          pagePath: 'pages/index',
          text: '首页'
        },
        {
          iconPath: './static/imgs/profile.png',
          selectedIconPath: './static/imgs/profile-selected.png',
          pagePath: 'pages/profile',
          text: '我的'
        }
      ]
    },
    requiredBackgroundModes: ['audio'],
    navigateToMiniProgramAppIdList: ['wx18a2ac992306a5a4']
  }

  globalData = {
    userInfo: null,
    infoScope: false,
    edit_lrc: false
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  onLaunch() {
    // 检查更新
    if (wx.canIUse('getUpdateManager')) {
      const updateManager = wx.getUpdateManager()
      updateManager.onCheckForUpdate(function (res) {
        // 请求完新版本信息的回调
        if (res.hasUpdate) {
          updateManager.onUpdateReady(function () {
            wx.showModal({
              title: '更新提示',
              content: '新版本已经准备好，是否重启应用？',
              success: function (res) {
                if (res.confirm) {
                  // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启
                  updateManager.applyUpdate()
                }
              }
            })
          })
          updateManager.onUpdateFailed(function () {
            // 新的版本下载失败
            wx.showModal({
              title: '已经有新版本了哟~',
              content: '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~'
            })
          })
        }
      })
    }

    // 初始化
    wx.cloud.init({
      traceUser: true
    })
    // 账户登录
    AccountTool.login(() => {
      // 获取用户信息
      wepy.getSetting({
        success: (res) => {
          if (res.authSetting['scope.userInfo']) {
            this.globalData.infoScope = true
            // 获取信息
            this.getUserInfo()
          } else {
            this.updateUserInfo()
          }
        }
      })
    })

    const bgaManager = wepy.getBackgroundAudioManager()
    bgaManager.onError((e) => {
      console.log(e, '音频管理器错误')
    })

    // 音乐播放
    bgaManager.onPlay(() => {
      MusicTool.playMusic()
    })

    // 音乐暂停
    bgaManager.onPause(() => {
      MusicTool.pauseMusic()
    })

    bgaManager.onWaiting(() => {
      MusicTool.changeWait(true)
    })
    bgaManager.onSeeking(() => {
      MusicTool.changeWait(true)
    })

    bgaManager.onEnded(() => {
      const id = store.getState().musicPlayer.music_id
      // 如果播放类型是单曲
      nextMusic(id)
    })

    bgaManager.onStop(() => {
      MusicTool.stopMusic()
    })

    // 下一曲
    bgaManager.onNext(() => {
      const id = wepy.$store.getState().musicPlayer.music_id
      // 如果播放类型是单曲
      nextMusic(id, 2)
    })

    // 上一曲
    bgaManager.onPrev(() => {
      const id = wepy.$store.getState().musicPlayer.music_id
      // 如果播放类型是单曲
      prevMusic(id, 2)
    })
  }

  onShow() {
     // 开始
    wepy.onAudioInterruptionBegin(() => {
      MusicTool.pauseMusic()
    })

    // 结束
    wepy.onAudioInterruptionEnd(() => {
      MusicTool.playMusic()
    })
  }

  onHide() {
    // wepy.offAudioInterruptionBegin()

    // // 结束
    // wepy.offAudioInterruptionEnd()
  }

  onError(msg) {
    console.log(msg)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      cb && cb(this.globalData.userInfo)
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
        that.updateUserInfo()
      }
    })
  }

  setUserInfo(userInfo) {
    this.globalData.userInfo = userInfo
    this.globalData.infoScope = true
    this.updateUserInfo()
  }

  updateUserInfo() {
    const openid = AccountTool.getOpenid()
    if (!openid) {
      return
    }
    // 更新个人信息
    Request.request({
      url: '/user/mini/edit/' + openid,
      method: 'PUT',
      data: this.globalData.userInfo || {},
      success: ({data}) => {
        if (data.code === 20000) {
          this.globalData.edit_lrc = data.data.edit_lrc
        }
      }
    })
  }
}
</script>
