<template>
  <view class="player">
    <view class="audio" wx:if="{{hasMusic}}">
      <view class="img">
        <image class="{{ !paused ? '' : 'hide' }}" src="../static/imgs/music.svg" model="aspectFill" />
        <image class="{{ paused ? '' : 'hide' }}" src="../static/imgs/music-stop.svg" model="aspectFill" />
      </view>
      <view class="name" @tap="jumpDetail">
        <label>{{ name }}</label>
      </view>
      <view class="actions">
        <image class="{{ isCache ? '' : 'hide' }}" src="../static/imgs/circles.svg" model="aspectFill"  />
        <image class="{{ (!isCache && paused) ? '' : 'hide' }}" @tap="playHandler" src="../static/imgs/play.png" model="aspectFill"  />
        <image class="{{ (!isCache && !paused) ? '' : 'hide' }}" @tap="pauseHandler" src="../static/imgs/pause.png" model="aspectFill" />
        <image class="{{ favorite ? '' : 'hide' }}" @tap="unsupportHandler" src="../static/imgs/unsupport.png" model="aspectFill" />
        <image class="{{ !favorite ? '' : 'hide' }}" @tap="supportHandler" src="../static/imgs/support.png" model="aspectFill" />
      </view>
    </view>
    <view class="line"></view>
  </view>
</template>

<script>
import wepy from 'wepy'
import { connect } from 'wepy-redux'
import MusicTool from '@/utils/MusicTool'
// import Request from '@/utils/request'
// import AccountTool from '@/utils/AccountTool'
import { favoriteMusic } from '@/store/actions/musicPlayer'

@connect({
  hasMusic(state) {
    return state.musicPlayer.music_id > 0
  },
  name(state) {
    return state.musicPlayer.music_name
  },
  paused(state) {
    return !state.musicPlayer.isPlaying
  },
  favorite(state) {
    return state.musicPlayer.favorite
  },
  isCache(state) {
    return state.musicPlayer.isWaiting
  }
})
export default class CusAudio extends wepy.component {
  props = {
    // 如果是跟歌曲在一页
    inPage: {
      type: Boolean,
      default: false
    }
  }

  methods = {
    jumpDetail() {
      wepy.navigateTo({
        url: 'music'
      })
    },
    playHandler() {
      MusicTool.playMusic()
      this.$apply()
    },
    pauseHandler() {
      MusicTool.pauseMusic()
      this.$apply()
    },
    supportHandler() {
      if (this.inPage) {
        this.$emit('favorite', {
          music_id: wepy.$store.getState().musicPlayer.music_id,
          favorite: true
        })
        return
      }
      favoriteMusic(true)
    },
    unsupportHandler() {
      if (this.inPage) {
        this.$emit('favorite', {
          music_id: wepy.$store.getState().musicPlayer.music_id,
          favorite: false
        })
        return
      }
      favoriteMusic(false)
    }
  }

  computed = {

  }
}
</script>

<style lang="less" scoped>
  .player {
    width:750rpx;
    position: fixed;
    background-color: white;
    min-height: 2px;
    z-index: 100;
    display: flex;
    justify-content: center;
    align-items: center;
    top:0rpx;

    .audio {
      width:650rpx;
      height:100rpx;
      background-color: white;
      position: relative;
      display: flex;
      justify-content: space-between;
      align-items: center;

      image {
        width: 45rpx;
        height: 45rpx;
      }

      .img {
        width:40rpx;
        height:100%;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .name {
        width: 450rpx;
        height: 100%;
        display: flex;
        justify-content: flex-start;
        align-items: center;

        label {
          // display: inline-block;
          width: 100%;
          color:#666;
          font-size: 30rpx;
          padding-top:10rpx;
        }
      }

      .actions {
        width: 120rpx;
        height: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

    }


    .line {
      width: 750rpx;
      height: 1px;
      background-color: #f2f2f2;
      transform:scaleY(0.768);
      position: absolute;
      bottom:1rpx;
      left:0;
    }
  }

  .hide {
    display: none;
  }
</style>
