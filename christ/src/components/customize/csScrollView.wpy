<template>
  <view class="csview">
    <!--  scroll-top="{{scrollOffset}}" -->
    <scroll-view class="scview" scroll-y scroll-with-animation lower-threshold="-1" upper-threshold="-1" bindscrolltoupper="topHander" bindscrolltolower="bottomHander" bindscroll="scroll">
      <!-- 滚动条 -->
      <!-- <view class="pullDown">
        <label>{{ freshText }}</label>
      </view> -->
      <view class="content {{smallPadding ? 'smallPadding':''}}">
        <slot></slot>
      </view>
      <!-- 底部刷新 -->
      <!-- <view class="pullUp">
        <label>{{freshBottomText}}</label>
      </view> -->
    </scroll-view>
    <!-- <view class="prompt">{{ scrollTop }}</view> -->
  </view>
</template>

<script>
import wepy from 'wepy'
export default class CsScrollView extends wepy.component {
  props = {
    autoFresh: {
      type: Boolean,
      default: false
    },
    smallPadding: {
      type: Boolean,
      default: false
    }
  }

  data = {
    enableTop: true,
    enableBottom: true,
    scrollTop: 0,
    currentTop: 0,
    downFlag: false,
    upFalg: false,
    downNoData: false,
    upNoData: false,
    scrollOffset: 40,
    freshText: '下拉刷新',
    freshBottomText: '上拉刷新',
    timerId: null
  }
  methods = {
    // 顶部开始滚动事件
    header_beginRefresh: () => {
      this.freshText = '正在刷新'
      this.downFlag = true
      this.scrollOffset = 0
      this.$apply()
      // 只要是下拉刷新，主动触发刷新方法
      this.$emit('headerRefreshHandler')
    },
    // 顶部滚动停止
    header_endRefresh: ({noData = false} = {noData: false}) => {
      const id = setTimeout(() => {
        this.scrollOffset = 40
        this.downFlag = false
        this.downNoData = this.downNoData ? this.downNoData : noData
        this.freshText = this.downNoData ? '暂无数据' : '下拉刷新'
        this.$apply()
        clearTimeout(id)
      }, 500)
    },
    // 底部开始刷新
    footer_beginRefresh: () => {
      this.freshBottomText = '正在刷新'
      this.upFalg = true
      this.$apply()
      // 只要是上拉刷新，主动触发刷新方法
      this.$emit('footerRefreshHandler')
    },
    // 底部停止刷新
    footer_endRefresh: ({noData = false} = {noData: false}) => {
      const id = setTimeout(() => {
        this.scrollOffset = this.currentTop - 40
        this.upFalg = false
        this.upNoData = this.upNoData ? this.upNoData : noData
        this.freshBottomText = this.upNoData ? '暂无数据' : '上拉刷新'
        this.$apply()
        clearTimeout(id)
      }, 500)
    },
    bottomHander: (e) => {
      if (!this.enableTop) {
        return
      }

      this.currentTop = this.scrollTop
      if (this.upNoData) {
        this.methods.footer_endRefresh()
        return
      }

      if (this.upFalg) {
        return
      }
      this.methods.footer_beginRefresh()
    },
    topHander: () => {
      if (!this.enableBottom) {
        return
      }

      if (this.downNoData) {
        this.methods.header_endRefresh()
        return
      }
      if (this.downFlag) {
        return
      }
      this.methods.header_beginRefresh()
    },
    scroll: (e) => {
      this.scrollTop = e.detail.scrollTop
    }
  }
}
</script>

<style lang="less" scoped>
  .csview {
    // position: relative;
    overflow: hidden;
    .prompt {
      height: 80px;
      left: 0;
      bottom: 80px;
      position: absolute;
      // background-color: red;
    }

    .scview {
      width:100%;
      height: 100%;
      position: relative;
      // background-color: #eeeeee;
     
     .pullDown {
        // background-color: red;
        height: 40px;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10;
 
        label {
          width: 100%;
          text-align: center;
          font-size:12px;
        }
      }
  
      .content {
        // padding-left:35rpx;
        // padding-right:35rpx;
        padding: 20rpx 35rpx;
        box-sizing: border-box;
        height: 101%;
        z-index: 100;
        background-color: white;
      }
      
      .smallPadding {
        padding: 20rpx 15rpx;
      }

      .pullUp {
        background-color: #eeeeee;
        height: 40px;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 12px;
      }
    }
  }
</style>
