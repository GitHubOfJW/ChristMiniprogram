<template>
  <view class="container {{ hasMusic ? 'is_play' : '' }}">
    <cusaudio :inPage.sync="inPage"></cusaudio>

    <!-- 专辑 -->
    <panel1 wx:if="{{!isloading}}">
      <albumdetail :album.sync = "albumData"></albumdetail>
    </panel1>

    <csscrollview wx:if="{{!isloading}}" class="list {{ hasMusic ? 'list_play' : ''}}">
      <repeat for="{{musics}}" key="index" index="index" item="music">
        <musicitem :music.sync="music"></musicitem>
      </repeat>
    </csscrollview>

    <toast />
    <csloading />
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import AlbumDetail from '@/components/albumdetail'
  import Panel from '@/components/panel' // alias example
  import CusAudio from '@/components/cusaudio'
  import MusicItem from '@/components/musicItem'
  import CustomLoading from '@/components/customize/csLoading'
  import CsLoading from '@/utils/CsLoading'
  import CsScrollView from '@/components/customize/csScrollView'
  import Toast from 'wepy-com-toast'
  import MusicTool from '@/utils/MusicTool'
  import AccountTool from '@/utils/AccountTool'
  import Request from '@/utils/request'

  @connect({
    hasMusic(state) {
      return state.musicPlayer.music_id > 0
    }
  })
  
  export default class Album extends wepy.page {
    config = {
      navigationBarTitleText: '专辑',
      disableScroll: false
    }

    components = {
      panel: Panel,
      panel1: Panel,
      panel2: Panel,
      cusaudio: CusAudio,
      albumdetail: AlbumDetail,
      csloading: CustomLoading,
      csscrollview: CsScrollView,
      musicitem: MusicItem,
      toast: Toast
    }

    data = {
      albumData: {
        big_url: '../static/imgs/placeholder.jpg',
        name: '专辑的名称',
        descr: '专辑的描述',
        music_count: 0
      },
      inPage: true,
      musics: [],
      isloading: true
    }

    methods = {
      music_favorite: (id, status) => {
        const openid = AccountTool.getOpenid()
        Request.request({
          url: '/favorite/mini/favorite',
          method: 'POST',
          data: {
            music_id: id,
            openid: openid,
            status: status
          },
          success: ({data}) => {
            for (let i = 0; i < parseInt((this.musics.length + 1) * 0.5); i++) {
              const preObj = this.musics[i]
              const endObj = this.musics[this.musics.length - i - 1]
              if (preObj.id === id) {
                preObj.favorite = status ? {music_id: id, open_id: openid, is_delete: !status} : null
                this.musics.splice(i, 1, preObj)
              } else if (endObj.id === id && i !== this.musics.length - i - 1) {
                endObj.favorite = status ? {music_id: id, open_id: openid, is_delete: !status} : null
                this.musics.splice(this.musics.length - i - 1, 1, endObj)
              }
            }
            this.$apply()
            if (wepy.$store.getState().musicPlayer.music_id === id) {
              MusicTool.favoriteMusic(status)
            }
          },
          fail: () => {

          },
          complete: () => {

          }
        })
      }
    }

    computed = {
    }

    events = {
      favorite: ({music_id, favorite}) => {
        this.methods.music_favorite(music_id, favorite)
      },
      choose_music: (music) => {
        if (music.favorite && music.favorite.is_delete) {
          music.favorite = null
        }
        MusicTool.resetMusic(music)
        MusicTool.playMusic()
      }
    }

    onLoad(option) {
      CsLoading.showLoading()
      this.isloading = true
      // 获取到ID 发起请求
      if (option && option.id) {
        Request.request({
          url: '/album/mini/' + option.id,
          method: 'GET',
          success: ({data}) => {
            if (data.code === 20000) {
              this.albumData.big_url = '../static/imgs/loading.svg'
              this.albumData = data.data
            }
          },
          fail: () => {

          },
          complete: () => {
            CsLoading.hideLoading({
              success: () => {
                this.isloading = false
                this.$apply()
              }
            })
          }
        })

        Request.request({
          url: '/music/mini/list',
          method: 'GET',
          data: {
            album_id: option.id
          },
          success: ({data}) => {
            if (data.code === 20000) {
              for (let music of data.data.items) {
                this.musics.push(music)
              }
            }
          },
          fail: () => {

          },
          complete: () => {
            CsLoading.hideLoading({
              success: () => {
              }
            })
          }
        })
      } else {
        wepy.navigateBack()
      }
    }

    onShow() {
    }
    onHide() {
    }
  }
</script>
<style lang="less">
  .is_play {
    padding-top:100rpx;
  }
 
  .container {
    width: 100%;
    height:100%;
  }
  
  .list {
    position: absolute;
    // width: 750rpx;
    left: 0rpx;
    right: 0rpx;
    top: 380rpx;
    bottom:20rpx;
    border-radius: 3px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    border-radius: 4px;
  }

  .list_play {
    top: 480rpx;
  }
</style>
