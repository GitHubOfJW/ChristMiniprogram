<template>
  <view class="container {{ hasMusic ? 'is_play' : '' }}">
    <cusaudio :inPage.sync="inPage"></cusaudio>

    <!-- 专辑 -->
    <panel1 wx:if="{{!isloading}}">
      <albumdetail :album.sync = "albumData"></albumdetail>
    </panel1>
 
    <view wx:if="{{!isloading}}" class="list {{ hasMusic ? 'list_play' : ''}}">
      <repeat for="{{musics}}" key="index" index="index" item="music">
        <musicitem :music.sync="music"></musicitem>
      </repeat>
    </view>

    <view class="numChoose {{hasMusic ? 'numChoose_play' : ''}}" @tap="showChoose" wx:if="{{albumData.music_count > 0}}">
      <label>序号选歌</label>
    </view>

    <toast />
    <csloading />
    <choosemusic :value.sync="chooseNum" :dialog.sync="chooseMusic" :count.sync="albumCount" />
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import AlbumDetail from '@/components/albumdetail'
  import Panel from '@/components/panel' // alias example
  import CusAudio from '@/components/cusaudio'
  import MusicItem from '@/components/musicItem'
  import CustomLoading from '@/components/customize/csLoading'
  import ChooseMusic from '@/components/customize/chooseMusic'
  import CsLoading from '@/utils/CsLoading'
  import Toast from 'wepy-com-toast'
  import MusicTool from '@/utils/MusicTool'
  import AccountTool from '@/utils/AccountTool'
  import Request from '@/utils/request'

  @connect({
    hasMusic(state) {
      return state.musicPlayer.music_id > 0
    }
  })
  
  export default class Album extends wepy.page {
    config = {
      navigationBarTitleText: '专辑',
      disableScroll: false,
      enablePullDownRefresh: true,
      backgroundTextStyle: 'dark'
    }

    components = {
      panel: Panel,
      panel1: Panel,
      panel2: Panel,
      cusaudio: CusAudio,
      albumdetail: AlbumDetail,
      csloading: CustomLoading,
      musicitem: MusicItem,
      choosemusic: ChooseMusic,
      toast: Toast
    }

    data = {
      albumData: {
        big_url: '../static/imgs/placeholder.jpg',
        name: '专辑的名称',
        descr: '专辑的描述',
        music_count: 0
      },
      inPage: true,
      musics: [],
      isloading: true,
      album_id: null,
      chooseMusic: false,
      chooseNum: 1,
      albumCount: 0
    }

    methods = {
      music_favorite: (id, status) => {
        const openid = AccountTool.getOpenid()
        Request.request({
          url: '/favorite/mini/favorite',
          method: 'POST',
          data: {
            music_id: id,
            openid: openid,
            status: status
          },
          success: ({data}) => {
            if (data.code !== 20000) {
              return
            }
            for (let i = 0; i < parseInt((this.musics.length + 1) * 0.5); i++) {
              const preObj = this.musics[i]
              const endObj = this.musics[this.musics.length - i - 1]
              if (preObj.id === id) {
                preObj.favorite = status ? {music_id: id, open_id: openid, is_delete: !status} : null
                this.musics.splice(i, 1, preObj)
              } else if (endObj.id === id && i !== this.musics.length - i - 1) {
                endObj.favorite = status ? {music_id: id, open_id: openid, is_delete: !status} : null
                this.musics.splice(this.musics.length - i - 1, 1, endObj)
              }
            }
            this.$apply()
            if (wepy.$store.getState().musicPlayer.music_id === id) {
              MusicTool.favoriteMusic(status)
            }
          },
          fail: () => {

          },
          complete: () => {

          }
        })
      },
      // 获取数据
      getData: ({minId, maxId, isHeader = true, clear = false}) => {
        const data = {
          album_id: this.album_id
        }
        if (isHeader && minId) {
          data.minId = minId
        } else if (!isHeader && maxId) {
          data.maxId = maxId
        }

        Request.request({
          url: '/music/mini/list',
          method: 'GET',
          data: data,
          success: ({data}) => {
            if (data.code === 20000) {
              if (clear) {
                this.musics.splice(0, this.musics.length)
              }
              const isFirst = this.musics.length <= 0
              for (let i = 0; i < data.data.items.length; i++) {
                if (isHeader) {
                  const music = !isFirst ? data.data.items[i] : data.data.items[data.data.items.length - 1 - i]
                  this.musics.unshift(music)
                } else {
                  const music = data.data.items[i]
                  this.musics.push(music)
                }
              }
            }
          },
          fail: () => {

          },
          complete: () => {
            if (isHeader) {
              wepy.stopPullDownRefresh()
            } else {
            }
            this.$apply()
          }
        })
      },
      showChoose: () => {
        if (this.albumCount > 0) {
          this.chooseMusic = true
        }
      }
    }

    computed = {
    }

    events = {
      closeChoose: () => {
        this.chooseMusic = false
      },
      tapdetail: () => {
        if (this.albumCount > 0) {
          this.chooseMusic = true
        }
      },
      favorite: ({music_id, favorite}) => {
        this.methods.music_favorite(music_id, favorite)
      },
      choose_music: (music) => {
        if (music.favorite && music.favorite.is_delete) {
          music.favorite = null
        }
        MusicTool.resetMusic(music)
        MusicTool.playMusic()
        MusicTool.changeWait(true)
      },
      chooseMusic: (value) => {
        this.chooseMusic = false
        this.chooseNum = value
        this.methods.getData({
          maxId: value - 1,
          isHeader: false,
          clear: true
        })
        this.$apply()
      }
    }

    onLoad(option) {
      // CsLoading.showLoading()
      this.isloading = true
      // 获取到ID 发起请求
      if (option && option.id) {
        this.album_id = option.id
        Request.request({
          url: '/album/mini/' + option.id,
          method: 'GET',
          success: ({data}) => {
            if (data.code === 20000) {
              this.albumData.big_url = '../static/imgs/loading.svg'
              this.albumData = data.data
              this.albumCount = data.data.music_count
            }
          },
          fail: () => {

          },
          complete: () => {
            // CsLoading.hideLoading({
            //   success: () => {
            this.isloading = false
            this.$apply()
              // }
            // })
          }
        })
      } else {
        wepy.navigateBack()
      }
    }

    onShow() {
      if (this.musics.length <= 0) {
        wepy.startPullDownRefresh()
      }
    }

    // 下拉刷新
    onPullDownRefresh() {
      this.methods.getData({
        minId: this.musics.length > 0 ? this.musics[0].num : -1,
        isHeader: true
      })
    }

    // 上拉刷新
    onReachBottom() {
      this.methods.getData({
        maxId: this.musics.length > 0 ? this.musics[this.musics.length - 1].num : -1,
        isHeader: false
      })
    }

    onHide() {
      CsLoading.hideLoading({
        success: () => {
          this.isloading = false
          this.$apply()
        }
      })
    }
  }
</script>
<style lang="less">
  .is_play {
    padding-top:100rpx;
  }
 
  .container {
    width: 100%;
    height:100%;
  }
  
  .list {
    // position: absolute;
    // width: 750rpx;
    // left: 0rpx;
    // right: 0rpx;
    // top: 380rpx;
    // bottom:0rpx;
    border-radius: 3px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    border-radius: 4px;
  }

  .numChoose {
      position: fixed;
      height: 60rpx;
      border-top-left-radius: 20px;
      border-bottom-left-radius: 20px;
      background-color: red;
      top:280rpx;
      right: 0rpx;
      justify-content: center;
      align-items: center;
      z-index:2;
      padding: 0rpx 20rpx;

      label {
        text-align: center;
        font-size: 30rpx;
        color: white;
        height: 60rpx;
        line-height: 60rpx;
      }
    }


  .list_play {
    top: 480rpx;
  }

  .numChoose_play {
    top: 380rpx;
  }
</style>
