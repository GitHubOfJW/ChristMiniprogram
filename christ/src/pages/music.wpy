<template>
  <view class="browser">
    <image class="topCover" src="../static/imgs/lrc_cover.png" model="scaleToFill"></image>
    <scroll-view class="content {{isSale ? '': 'float_bottom'}}" scroll-y scroll-with-animation="{{scollAnimate}}" scroll-top="{{lrc_top}}rpx">
      <view class="lrcs">
        <repeat for="{{lrcs}}" key="index" index="index" item="lrc">
          <lrcitem :idx.sync="index" :edit.sync="edit" :lrc.sync="lrc"></lrcitem>
        </repeat>
      </view>
      <button class="save" wx:if="{{edit}}" plain type="primary" bindtap="saveLrc" size="mini">保存</button>
    </scroll-view>
    <image class="bottomCover {{isSale ? '': 'float_bottom'}}" src="../static/imgs/lrc_cover.png" mode="scaleToFill"></image>
    <!-- 控制 -->
    <view class="control {{isSale ? '': 'hide'}}">
      <slider block-size="15" value="{{current}}" bindchanging="changing" bindchange="change" min="0" max="{{duration}}"></slider>
      <view class="time">
        <label>{{ currentTimeStr }}</label>
        <label>{{ durationStr }}</label>
      </view>
      <view class="tool">
        <image class="{{ singlePlayer ? '' : 'hide'}}" @tap="typeHandler" src="../static/imgs/singlecycle.png" model="aspectFill"  />
        <image class="{{ !singlePlayer ? '' : 'hide'}}" @tap="typeHandler" src="../static/imgs/listcycle.png" model="aspectFill"  />
        <!-- 上一曲 -->
        <image @tap="prevHander" src="../static/imgs/prev.png" model="aspectFill"  />
        <!-- 中间播放按钮 -->
        <image class="{{ isCache ? '' : 'hide' }}" src="../static/imgs/circles.svg" model="aspectFill"  />
        <image class="{{ (!isCache && paused) ? '' : 'hide' }}" @tap="playHandler" src="../static/imgs/play.png" model="aspectFill"  />
        <image class="{{ (!isCache && !paused) ? '' : 'hide' }}" @tap="pauseHandler" src="../static/imgs/pause.png" model="aspectFill" />
        <!-- 下一曲 -->
        <image @tap="nextHandler" src="../static/imgs/next.png" model="aspectFill"  />
        <!-- 收藏按钮 -->
        <image class="{{ favorite ? '' : 'hide' }}" @tap="unsupportHandler" src="../static/imgs/unsupport.png" model="aspectFill" />
        <image class="{{ !favorite ? '' : 'hide' }}" @tap="supportHandler" src="../static/imgs/support.png" model="aspectFill" />
      </view>
    </view>
    <view class="editlrc" @tap="enableEdit" wx:if="{{editAuth && has_lrc && isSale}}">
      <label>{{ edit ? '取消' : '编词'}}</label>
    </view>
    <toast />
  </view>
</template>
<script>
import wepy from 'wepy'
import LrcItem from '@/components/lrcitem'
import Request from '@/utils/request'
import { connect } from 'wepy-redux'
import MusicTool from '@/utils/MusicTool'
import { nextMusic, prevMusic, favoriteMusic } from '@/store/actions/musicPlayer'
import Toast from 'wepy-com-toast'
@connect({
  hasMusic(state) {
    return state.musicPlayer.music_id > 0
  },
  name(state) {
    return state.musicPlayer.music_name
  },
  paused(state) {
    return !state.musicPlayer.isPlaying
  },
  singlePlayer(state) {
    return state.musicPlayer.playType === 1
  },
  favorite(state) {
    return state.musicPlayer.favorite
  },
  isCache(state) {
    return state.musicPlayer.isWaiting
  },
  isSale(state) {
    return state.musicPlayer.is_sale
  }
})

export default class Music extends wepy.page {
  config = {
    navigationBarTitleText: '歌词'
  }

  components = {
    lrcitem: LrcItem,
    toast: Toast
  }

  data = {
    lrcs: [],
    id: null,
    edit: false,
    has_lrc: false,
    durationStr: '',
    currentTimeStr: '',
    current: 0,
    duration: 0,
    seekFlag: false,
    lrc_top: 0,
    editAuth: false,
    scollAnimate: true
  }

  events = {
    settime: (index) => {
      const bgaManager = wepy.getBackgroundAudioManager()
      const time = Math.round(bgaManager.currentTime * 1000)
      const lrc = this.lrcs[index]
      this.lrcs.splice(index, 1, {
        time: time,
        timeStr: this.methods.filter(time, true),
        text: lrc.text,
        checked: lrc.checked
      })
      this.$apply()
    }
  }

  methods = {
    enableEdit: () => {
      this.edit = !this.edit
    },
    prevHander: () => {
      const id = wepy.$store.getState().musicPlayer.music_id
      // 如果播放类型是单曲
      prevMusic(id, 2)
    },
    nextHandler: () => {
      const id = wepy.$store.getState().musicPlayer.music_id
      // 如果播放类型是单曲
      nextMusic(id, 2)
    },
    typeHandler: () => {
      const playType = wepy.$store.getState().musicPlayer.playType
      if (playType === 1) {
        MusicTool.changePlayType(2)
      } else {
        MusicTool.changePlayType(1)
      }
    },
    changing: (e) => {
      this.seekFlag = true
      this.scollAnimate = false
      const currentTime = (e.detail.value)
      this.currentTimeStr = this.methods.filter(currentTime, false)
      this.methods.checkScorllLrc(currentTime)
      this.$apply()
    },
    change: (e) => {
      const currentTime = (e.detail.value) / 1000
      const bgaManager = wepy.getBackgroundAudioManager()
      let time = Math.min(currentTime, bgaManager.duration) - 1
      if (time <= 0) {
        time = 0.1
      }
      bgaManager.seek(time)
      this.seekFlag = false
      this.scollAnimate = true
      MusicTool.playMusic()
      this.$apply()
    },
    // 检测歌词滚动
    checkScorllLrc: (time) => {
      // 查找歌词
      let clearIndex = 0
      for (let i = this.lrcs.length - 1; i >= 0; i--) {
        const lrc = this.lrcs[i]
        lrc.checked = false
        if (time >= lrc.time) {
          lrc.checked = true
          clearIndex = i
          this.lrc_top = i * 60
          break
        }
      }
      // 清除checked
      for (let i = 0; i < clearIndex; i++) {
        const lrc = this.lrcs[i]
        lrc.checked = false
      }
      this.$apply()
    },
    saveLrc: () => {
      const lrcList = []
      for (let item of this.lrcs) {
        lrcList.push(item.timeStr + item.text)
      }
      lrcList.splice(0, 2)
      // 保存歌词
      Request.request({
        url: '/music/mini/edit/' + this.id,
        method: 'PUT',
        data: {
          lrc: lrcList.join('\n')
        },
        success: ({data}) => {
          if (data.code === 20000) {
            this.edit = data.data.lrc_edit
            this.$apply()
          } else {
            // 如果保存有问题
            wepy.showToast({
              title: data.message,
              icon: 'none'
            })
          }
        }
      })
    },
    getLrc: () => {
      // 获取到歌词的id
      const id = wepy.$store.getState().musicPlayer.music_id
      if (this.id && this.id === id) {
        return
      }
      Request.request({
        url: '/music/mini/' + id,
        method: 'GET',
        success: ({data}) => {
          if (data.code === 20000) {
            this.id = id
            this.editAuth = this.$parent.globalData.edit_lrc
            this.has_lrc = data.data.has_lrc
            this.lrcs.splice(0, this.lrcs.length)
            this.edit = data.data.lrc_edit && this.$parent.globalData.edit_lrc
            if (!data.data.has_lrc) {
              this.lrcs.push({
                time: 1000,
                timeStr: '[0:1:0]',
                text: '歌曲：' + data.data.name,
                checked: false
              })
              this.lrcs.push({
                time: 1500,
                timeStr: '[0:1:500]',
                text: '作者：' + data.data.author,
                checked: false
              })
              this.lrcs.push({
                time: 3000,
                timeStr: '[0:3:0]',
                text: '暂无歌词',
                checked: false
              })
              this.$apply()
              return
            }
            const lrcs = data.data.lrc.split('\n')
            for (let lrc of lrcs) {
              const lrcItems = lrc.split(']')
              this.lrcs.push({
                time: this.methods.trans(lrcItems[0]),
                timeStr: lrcItems[0] + ']',
                text: lrcItems[1],
                checked: false
              })
            }
            this.lrcs.unshift({
              time: 100,
              timeStr: '[0:0:100]',
              text: '作者：' + data.data.author,
              checked: false
            })
            this.lrcs.unshift({
              time: 50,
              timeStr: '[0:0:50]',
              text: '歌曲：' + data.data.name,
              checked: false
            })
            // 刷新
            const bgaManager = wepy.getBackgroundAudioManager()
            this.current = Math.round((bgaManager.currentTime || 0) * 1000)
            if (!this.edit) {
              this.methods.checkScorllLrc(this.current)
            }
            this.currentTimeStr = this.methods.filter(this.current, false)
            this.duration = Math.round((bgaManager.duration || 0) * 1000)
            this.durationStr = this.methods.filter(this.duration, false)
            this.lrc_top = 0
            this.$apply()
          }
        },
        fail: () => {

        },
        complete: () => {

        }
      })
    },
    filter: (num, hasRang = true) => {
      const t = num // this.time
      let minute = 0
      let second = 0
      let msecond = 0
      minute = parseInt(t / 60000) // 分钟
      second = parseInt(t % 60000 / 1000) // 秒
      if (!hasRang) {
        return ('0'.repeat(1 - parseInt(minute > 9 ? 1 : 0)) + minute) + ':' + ('0'.repeat(1 - parseInt(second > 9 ? 1 : 0)) + second)
      }
      msecond = parseInt(t % 1000)
      return '[' + minute + ':' + second + ':' + msecond + ']'
    },
    trans: (str) => {
      const times = str.replace('[', '').replace(']', '').split(':')
      let time = 0
      time += parseInt(times[0]) * 60000
      time += parseInt(times[1]) * 1000
      time += parseInt(times[2])
      return time
    },
    playHandler() {
      MusicTool.playMusic()
      this.$apply()
    },
    pauseHandler() {
      MusicTool.pauseMusic()
      this.$apply()
    },
    supportHandler() {
      if (this.inPage) {
        this.$emit('favorite', {
          music_id: wepy.$store.getState().musicPlayer.music_id,
          favorite: true
        })
        return
      }
      favoriteMusic(true)
    },
    unsupportHandler() {
      if (this.inPage) {
        this.$emit('favorite', {
          music_id: wepy.$store.getState().musicPlayer.music_id,
          favorite: false
        })
        return
      }
      favoriteMusic(false)
    }
  }

  onLoad() {
    this.methods.getLrc()
    this.seekFlag = false
    const bgaManager = wepy.getBackgroundAudioManager()
    bgaManager.onTimeUpdate((args) => {
      // 如果是选中时间
      if (this.seekFlag) {
        return
      }
      this.current = Math.round((bgaManager.currentTime || 0) * 1000)
      if (!this.edit) {
        this.methods.checkScorllLrc(this.current)
      }
      this.currentTimeStr = this.methods.filter(this.current, false)
      if (bgaManager.duration <= 0) {
        return
      }
      this.duration = Math.round((bgaManager.duration || 0) * 1000)
      this.durationStr = this.methods.filter(this.duration, false)
      this.$apply()
    })

    // 设置
    bgaManager.onCanplay(() => {
      this.methods.getLrc()
    })
  }

  onUnload() {
    const bgaManager = wepy.getBackgroundAudioManager()
    bgaManager.onTimeUpdate(null)
    bgaManager.onCanplay(null)
  }
}
</script>

<style lang="less" scoped>
  /*隐藏滚动条*/
  ::-webkit-scrollbar{
  width: 0;
  height: 0;
  color: transparent;
  }
  
  .browser {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: #fbfbfb;

    .topCover {
      position: absolute;
      left: 0rpx;
      right: 0rpx;
      height: 200rpx;
      top:0;
      z-index: 2;
      pointer-events: none;
    }

    .bottomCover {
      position: absolute;
      left: 0rpx;
      right: 0rpx;
      height: 200rpx;
      bottom: 270rpx;
      z-index: 2;
      transform: rotateZ(180deg);
      pointer-events: none;
    }
    
    .content {
      position: absolute;
      top: 0rpx;
      bottom: 270rpx;
      left :0;
      right:0;
      background-color: #fbfbfb;
 
      .lrcs {
        padding-top: 40%;
        padding-bottom: 40%;
        width: 100%;
      }
      .save {
        position: relative;
        left:50%;
        transform: translateX(-50%);
        margin-bottom: 40rpx;
      }
    }


    .float_bottom {
      bottom: 0rpx !important;
    }

    .control {
      width: 100%;
      height: 250rpx;
      position: absolute;
      bottom: 0rpx;
      left: 0rpx;
      right: 0rpx;
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      align-items: center;
 
      slider {
        width: 650rpx;
      }

      .time {
         width: 650rpx;
         display: flex;
         justify-content: space-between;
         align-items: center;
         label {
           font-size: 28rpx;
         }
      }

      .tool {
        width:  650rpx;
        margin-top: 25rpx;
        display: flex;
        justify-content: space-between;
        align-items: center;
        image {
          width: 60rpx;
          height: 60rpx;
        }
      }
    }
  }

  .editlrc {
      position: fixed;
      height: 70rpx;
      border-top-left-radius: 20px;
      border-bottom-left-radius: 20px;
      background-color: red;
      top:400rpx;
      right: 0rpx;
      justify-content: center;
      align-items: center;
      z-index:2;
      padding: 0rpx 20rpx;

      label {
        text-align: center;
        font-size: 30rpx;
        color: white;
        height: 70rpx;
        line-height: 70rpx;
      }
  }



  .hide {
    display: none !important;
  }
</style>
