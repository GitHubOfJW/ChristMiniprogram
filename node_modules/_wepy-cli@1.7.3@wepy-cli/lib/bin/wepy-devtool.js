'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _localPath = require('../cli/local-path');

var _localPath2 = _interopRequireDefault(_localPath);

var _ask = require('../cli/ask');

var _ask2 = _interopRequireDefault(_ask);

var _logger = require('../cli/logger');

var logger = _interopRequireWildcard(_logger);

var _devtoolPrompt = require('../cli/devtool-prompt');

var prompt = _interopRequireWildcard(_devtoolPrompt);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEVTOOLS_DEFAULT_ROOTDIR = {
    'darwin': '/Applications/wechatwebdevtools.app',

    'win32': 'C:\\Program Files (x86)\\Tencent\\微信web开发者工具'
};

var DEVTOOLS_RELATIVEPATH_MAP = {
    'darwin': '/Contents/Resources/app.nw/bin/cli',

    'win32': '/cli.bat'
};

var ACTION_LIST = {
    open: {
        ask: false,
        default: {
            path: _util2.default.currentDir
        },
        handler: devtoolOpen,
        prompt: prompt.open,
        args: ['path']
    },
    login: {
        ask: false,
        handler: devtoolLogin,
        prompt: prompt.login,
        args: ['loginQrOutput']
    },
    preview: {
        ask: false,
        default: {
            format: 'terminal',
            path: _util2.default.currentDir,
            target: ''
        },
        handler: devtoolPreview,
        prompt: prompt.preview,
        args: ['path', 'previewQrOutput']
    },
    test: {
        ask: false,
        default: {
            path: _util2.default.currentDir
        },
        handler: devtoolTest,
        prompt: prompt.test,
        args: ['path']
    },
    upload: {
        ask: true,
        default: {
            path: _util2.default.currentDir
        },
        handler: devtoolUpload,
        prompt: prompt.upload,
        args: ['path', 'uploadDesc']
    }
};

var getDevtoolCliPath = function getDevtoolCliPath(rootPath) {
    var platform = process.platform;
    var relativePath = DEVTOOLS_RELATIVEPATH_MAP[platform];
    var devtoolsCliPath = '';

    if (!relativePath) {
        return logger.fatal('该平台暂不支持 wepy devtool 功能');
    } else {
        devtoolsCliPath = _path2.default.join(rootPath, relativePath);
        if (platform === 'win32') {
            devtoolsCliPath = '\'' + devtoolsCliPath + '\'';
        }
    }
    return devtoolsCliPath;
};

function devtoolOpen(bin, options, userArgs) {
    var path = userArgs.path || options.path;

    var cmd = '';
    try {
        if (path === '') {
            cmd = bin + ' -o';
            logAndExec(cmd);
        } else if (_localPath2.default.isLocalPath(path)) {
            cmd = bin + ' -o ' + path;
            logAndExec(cmd);
        } else {
            logger.fatal('打开项目失败：项目路径必须是本地路径');
        }
    } catch (e) {
        logger.fatal('打开工具失败：' + e.message);
    }
};

function devtoolLogin(bin, options, userArgs) {
    var format = options.format;
    var target = options.target;
    var loginQrOutput = userArgs.loginQrOutput ? userArgs.loginQrOutput : target ? format + '@' + target : format;
    try {
        var cmd = loginQrOutput ? bin + ' -l --login-qr-output ' + loginQrOutput : bin + ' -l';
        logAndExec(cmd);
    } catch (e) {
        logger.fatal('登录失败：' + e.message);
    }
};

function devtoolPreview(bin, options, userArgs) {
    var format = options.format;
    var path = userArgs.path || options.path;
    var target = options.target;
    var previewQrOutput = userArgs.previewQrOutput ? userArgs.previewQrOutput : target ? format + '@' + target : format;

    try {
        if (_localPath2.default.isLocalPath(path)) {
            previewQrOutput ? logAndExec(bin + ' -p ' + path + ' --preview-qr-output ' + previewQrOutput) : logAndExec(bin + ' -p ' + path);
        } else {
            logger.fatal('预览项目失败：项目路径必须是本地路径');
        }
    } catch (e) {
        logger.fatal('预览项目失败：' + e.message);
    }
}

function devtoolUpload(bin, options, userArgs) {
    var version = options.version;
    var path = options.path;
    var desc = userArgs.uploadDesc || options.desc;
    var upload = userArgs.path ? userArgs.path : path ? version + '@' + path : version;

    try {
        if (_localPath2.default.isLocalPath(path)) {
            logAndExec(bin + ' -u ' + upload + ' --upload-desc \'' + desc + '\'');
        } else {
            logger.fatal('预览项目失败：项目路径必须是本地路径');
        }
    } catch (e) {
        logger.fatal('预览项目失败：' + e.message);
    }
}

function devtoolTest(bin, options, userArgs) {
    var path = userArgs.path || options.path;

    try {
        if (_localPath2.default.isLocalPath(path)) {
            logAndExec(bin + ' -t ' + path);
        } else {
            logger.fatal('提交测试失败：项目路径必须是本地路径');
        }
    } catch (e) {
        logger.fatal('提交测试失败：' + e.message);
    }
}

function logAndExec(cmd) {
    console.log('Execute: ' + cmd);
    _util2.default.exec(cmd);
}

exports = module.exports = function (program, path, cmd) {
    var config = _util2.default.getConfig() || {};
    var rootDir = config.devtool && config.devtool.rootDir || DEVTOOLS_DEFAULT_ROOTDIR[process.platform];
    var bin = getDevtoolCliPath(rootDir);

    var action = ACTION_LIST[program];

    if (action) {
        var options = Object.assign({}, action.default || {});
        var userArgs = {};
        var p = void 0;
        action.args.forEach(function (k) {
            return (p = k === 'path' ? path : cmd[k]) ? userArgs[k] = p : undefined;
        });

        if (action.ask && Object.keys(userArgs).length === 0) {
            (0, _ask2.default)(action.prompt, options, function () {
                action.handler(bin, options, userArgs);
            });
        } else {
            action.handler(bin, options, userArgs);
        }
    } else {
        logger.fatal('不支持的命令：wepy devtool' + program + '。运行命令： wepy devtool --help 查看具体用法');
    }
};