#!/usr/bin/env node
'use strict';

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _util3 = require('../cli/util');

var _child_process = require('child_process');

var _localPath = require('../cli/local-path');

var _localPath2 = _interopRequireDefault(_localPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEVTOOLS_RELATIVEPATH_MAP = {
  'darwin': '/Contents/Resources/app.nw/bin/cli',

  'win32': '/cli.bat'
};

var getDevtoolsCliPath = function getDevtoolsCliPath(rootPath) {
  var relativePath = DEVTOOLS_RELATIVEPATH_MAP[process.platform];

  if (!relativePath) {
    console.log(_chalk2.default.red('该平台暂不支持 wepy publish 功能'));
  } else {
    return (0, _util3.combineURL)(rootPath, relativePath);
  }
};

var devtoolsOpen = function devtoolsOpen(bin, program) {
  var projectPath = program.open;
  var isLocalPath = _localPath2.default.isLocalPath(projectPath);

  try {
    if ((0, _util3.isTrue)(projectPath)) {
      _util2.default.exec(bin + ' -o');
    } else if (isLocalPath) {
      _util2.default.exec(bin + ' -o ' + projectPath);
    } else {
      console.log(_chalk2.default.red('打开项目失败：项目路径必须是本地路径'));
    }
  } catch (e) {
    console.log(_chalk2.default.red('打开工具失败：' + e.message));
  }
};

var devtoolsLogin = function devtoolsLogin(bin, program) {
  var login = program.login;
  var loginQrOutput = program.loginQrOutput;

  try {
    if (login) {
      loginQrOutput ? _util2.default.exec(bin + ' -l --login-qr-output ' + loginQrOutput) : _util2.default.exec(bin + ' -l');
    }
  } catch (e) {
    console.log(_chalk2.default.red('登录失败：' + e.message));
  }
};

var devtoolsPreview = function devtoolsPreview(bin, program) {
  var projectRoot = program.preview;
  var previewQrOutput = program.previewQrOutput;

  try {
    if (_localPath2.default.isLocalPath(projectRoot)) {
      previewQrOutput ? _util2.default.exec(bin + ' -p ' + projectRoot + ' --preview-qr-output ' + previewQrOutput) : _util2.default.exec(bin + ' -p ' + projectRoot);
    }
  } catch (e) {
    console.log(_chalk2.default.red('预览项目失败：' + e.message));
  }
};

var devtoolsUpload = function devtoolsUpload(bin, program) {
  var upload = program.upload;
  var uploadDes = program.uploadDes || 'release';

  try {
    if (upload) {
      _util2.default.exec(bin + ' -u ' + upload + ' --upload-desc ' + uploadDes);
    }
  } catch (e) {
    console.log(_chalk2.default.red('预览项目失败：' + e.message));
  }
};

var devtoolsTest = function devtoolsTest(bin, program) {
  var testPath = program.test;

  try {
    if (_localPath2.default.isLocalPath(testPath)) {
      _util2.default.exec(bin + ' -t ' + testPath);
    } else {
      console.log(_chalk2.default.red('提交测试失败：项目路径必须是本地路径'));
    }
  } catch (e) {
    console.log(_chalk2.default.red('提交测试失败：' + e.message));
  }
};

exports = module.exports = function (program) {
  var config = _util2.default.getConfig() || {};

  if (config.devtools && config.devtools.rootDir) {
    var rootDir = config.devtools.rootDir;
    var bin = getDevtoolsCliPath(rootDir);

    program.open && devtoolsOpen(bin, program);
    program.login && devtoolsLogin(bin, program);
    program.preview && devtoolsPreview(bin, program);
    program.upload && devtoolsUpload(bin, program);
    program.test && devtoolsTest(bin, program);
  } else {
    console.log(_chalk2.default.red('请检查 devtool.rootPath 的配置'));
  }
};